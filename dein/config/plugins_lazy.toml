# 遅延の指定方法
# -----------------------------------------
# on_i = 1 # インサートモードの時
# on_ft = 'ruby' ファイルタイプがrubyの時
# on_source = ['unite.vim'] # unite.vim を読み込んだ時に一緒に読み込む
# ---------------------

# プラグイン一覧(遅延ロード)

# -----------------------------------------
# コーディングツール
# -----------------------------------------
[[plugins]] # Rubyのend補完
repo = 'tpope/vim-endwise'
on_ft = 'ruby'

[[plugins]] # Ruby補完
repo = 'takkii/ruby-dictionary3'
on_ft = 'ruby'
hook_add = '''
let g:neocomplete#sources#dictionary#dictionaries = {
    \   'ruby': $HOME . '/.vim/dein/repos/github.com/takkii/ruby-dictionary3/autoload/source/ruby_method_complete',
    \ }
'''

[[plugins]] # コード補完
repo = 'Shougo/neocomplete.vim'
on_i = 1
hook_add = '''
  " neocompleteを起動時に有効化"
  let g:neocomplete#enable_at_startup               = 1
  let g:neocomplete#enable_ignore_case              = 1
  " 大文字が入力されるまで大文字小文字を無視
  let g:neocomplete#enable_smart_case               = 1
  let g:neocomplete#use_vimproc                     = 1
  let g:neocomplete#sources#buffer#cache_limit_size = 100000
  let g:neocomplete#sources#tags#cache_limit_size   = 300000
  let g:neocomplete#enable_fuzzy_completion         = 1
  let g:neocomplete#lock_buffer_name_pattern        = '\*ku\*'
  " Define dictionary.
  let s:neco_dicts_dir = $HOME.'./vim/dicts/'
  if isdirectory(s:neco_dicts_dir)
    let g:neocomplete#sources#dictionary#dictionaries = {
        \ 'default' : '',
        \ 'vimshell' : $HOME.'/.vimshell_hist',
        \ 'scheme' : $HOME.'/.gosh_completions',
        \ 'ruby': s:neco_dicts_dir . '/ruby.dict',
        \ 'javascript': s:neco_dicts_dir . '/jquery.dict'
        \ }
  endif
  " Define keyword.
  if !exists('g:neocomplete#keyword_patterns')
      let g:neocomplete#keyword_patterns = {}
  endif
  let g:neocomplete#keyword_patterns['default'] = '\h\w*'
  " Plugin key-mappings.
  inoremap <expr><C-g>     neocomplete#undo_completion()
  inoremap <expr><C-l>     neocomplete#complete_common_string()
  " Recommended key-mappings.
  " <CR>: close popup and save indent.
  inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
  function! s:my_cr_function()
    return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
    " For no inserting <CR> key.
    "return pumvisible() ? "\<C-y>" : "\<CR>"
  endfunction
  " TABキーで補完の移動をしたい
  inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "<TAB>"
  " <C-h>, <BS>: close popup and delete backword char.
  inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
  inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"

  if !exists('g:neocomplete#force_omni_input_patterns')
      let g:neocomplete#force_omni_input_patterns = {}
  endif

  let g:neocomplete#force_omni_input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
  let g:neocomplete#force_omni_input_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
  let g:neocomplete#force_omni_input_patterns.typescript = '[^. \t]\.\%(\h\w*\)\?'

  " Rsense
  let g:rsenseUseOmniFunc = 1
  let g:neocomplete#sources#rsense#home_directory = '/home/test_user/.rbenv/shims/rsense'
'''

[[plugins]] # コード実行
repo = 'thinca/vim-quickrun'
hook_add = '''
  nnoremap <silent> qr :QuickRun -hook/time/enable 1<Enter>
  nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
  set termencoding=utf-8
  let g:quickrun_config = {
        \ "_" : {
        \   "runner" : "vimproc",
        \   "runner/vimproc/updatetime" : 60,
        \   "hook/time/enable" : 1,
        \ }}
'''

[[plugins]] # コード整形
repo = 'alpaca-tc/beautify.vim'
hook_add = '''
  let g:beautify#beautifier#npm_beautifier#bin = {
        \ 'javascript' : 'js-beautify',
        \ 'css'        : 'css-beautify',
        \ 'html'       : 'html-beautify'
        \ }
  let g:beautify#beautifier#jq#bin = 'jq'
  " JavaScriptの整形
  nnoremap <silent> <Space>bj :<C-u>Beautify js-beautify<Enter>
  " Htmlの整形
  nnoremap <silent> <Space>bh :<C-u>Beautify html-beautify<Enter>
'''

# -----------------------------------------
# 表示
# -----------------------------------------
[[plugins]] # サイドメニューバー
repo = 'scrooloose/nerdtree'
hook_add = '''
  nnoremap <silent> nd :NERDTreeToggle<Enter>
'''

[[plugins]] # 便利ツール
repo = 'Shougo/unite.vim'
hook_add = '''
  " The prefix key.
  nnoremap    [unite]   <Nop>
  nmap    f [unite]
  nnoremap [unite]u  :<C-u>Unite <Space>
  " 全部乗せ
  nnoremap <silent> [unite]a  :<C-u>UniteWithCurrentDir -buffer-name=files buffer file_mru bookmark file<CR>
  " ファイル一覧
  nnoremap <silent> [unite]f  :<C-u>Unite -buffer-name=files file<CR>
  " ファイル検索
  nnoremap <silent> [unite]p  :<C-u>Unite -buffer-name=files file_rec/async:!<cr>
  " バッファ一覧
  nnoremap <silent> [unite]b  :<C-u>Unite buffer<CR>
  " 常用セット
  nnoremap <silent> [unite]u  :<C-u>Unite buffer file_mru<CR>
  " 最近使用したファイル一覧
  nnoremap <silent> [unite]m  :<C-u>Unite file_mru<CR>
  " 現在のバッファのカレントディレクトリからファイル一覧
  nnoremap <silent> [unite]d  :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
  " snippet一覧
  nnoremap <silent> [unite]s  :<C-u>Unite snippet<CR>
  " color一覧
  nnoremap <silent> [unite]c  :<C-u>Unite colorscheme -auto-preview<CR>
  " yank履歴一覧
  nnoremap <silent> [unite]y  :<C-u>Unite yankround<CR>
  " 宣言一覧
  nnoremap <silent> [unite]o  :<C-u>Unite outline<CR>
  " nnoremap <silent> [unite]b  :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>
  " ウィンドウを分割して開く
  au Filetype unite nnoremap <silent> <buffer> <expr> <C-j> unite#do_action('splist')
  au Filetype unite inoremap <silent> <buffer> <expr> <C-l> unite#do_action('split')
  " ウィンドウを縦に分割して開く
  au Filetype unite nnoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
  au Filetype unite inoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
  " ESCキーを2回押すと終了する
  au FileType unite nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
  au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>
  " unite-plugins
  cnoremap UH Unite help<Enter>
  cnoremap UO Unite outline<Enter>
  " 設定
  let g:unite_enable_start_insert = 1
  let g:unite_cursor_line_highlight = 'CursorLine'
  let g:unite_source_file_mru_filename_format = ':~:.'
  let g:unite_source_file_mru_limit = 5000
  let g:unite_source_directory_mru_limit = 300
  let g:unite_source_rec_min_cache_files = 50
  let g:unite_source_rec_max_cache_files = 1000
'''

[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = ['unite.vim']

[[plugins]]
repo = 'ujihisa/unite-colorscheme'
on_source = ['unite.vim']

[[plugins]]
repo  = 'Quramy/tsuquyomi'
on_ft = ['typescript']
